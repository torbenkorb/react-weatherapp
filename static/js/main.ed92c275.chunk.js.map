{"version":3,"sources":["components/Citylist/index.js","components/Drawer/index.js","components/Indicator/index.js","components/DateComponent/index.js","lib/utilities.js","components/WeatherIcon/index.js","components/Forecastlist/index.js","components/GetLocation/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Citylist","listItems","this","props","cities","map","item","onClick","selectCity","toLowerCase","className","Component","Drawer","state","inlineStyle","drawer","startX","currX","isTouched","onTouchHandler","bind","onTouchMoveHandler","onTouchEndHandler","swipeDrawer","isActive","document","body","classList","add","remove","event","touches","pageX","requestAnimationFrame","newState","transform","Math","min","toggleDrawer","setState","prevState","transformStyles","onTouchStart","onTouchMove","onTouchEnd","style","getLocation","Indicator","isLoading","dateOptions","weekday","month","day","dateTimeOptions","hour","minute","DateComponent","d1","d2","dateObject","Date","timestamp","now","dateOutput","getFullYear","getMonth","getDate","toLocaleDateString","removeTime","toLocaleString","icons","WeatherIcon","icon","ForecastList","index","dt","weather","description","round","temp","max","children","GetLocation","getCurrentLocation","initialCitiesMap","App","componentDidMount","getWeatherData","selectedCity","city","coords","latitude","longitude","apiURL","fetch","then","res","ok","Promise","resolve","json","reject","data","weatherAPIData","saveLocalStorage","catch","err","console","error","updateWeather","drawerOpen","target","innerText","navigator","geolocation","getDeviceGeoLocation","position","coordsString","getCityByCoords","getCurrentPosition","message","gMapsLatLngStr","split","gMapsLatLng","lat","parseFloat","lng","geocoder","window","google","maps","Geocoder","geocodeLatLng","latlng","geocode","results","status","GeocoderStatus","OK","result","address_components","cityName","i","length","types","includes","long_name","alert","type","storage","x","setItem","removeItem","e","DOMException","code","name","storageAvailable","localStorage","JSON","stringify","render","api","currentTemperature","current","currentSummary","date","Object","keys","daily","getItem","parse","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","getElementById","URL","process","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ed92c275.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Citylist extends Component {\n\n    render() {\n        const listItems = this.props.cities.map(item => {\n            return (<li onClick={this.props.selectCity} key={item.toLowerCase()}>{item}</li>);\n        });\n\n        return (\n            <div className=\"Citylist\">\n                <ul>\n                    {listItems}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default Citylist;\n","import React, { Component } from 'react';\nimport Citylist from '../Citylist';\n\nclass Drawer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inlineStyle: {}\n        }\n\n        this.drawer = {\n            startX: 0,\n            currX: 0,\n            isTouched: false\n        };\n\n        this.onTouchHandler = this.onTouchHandler.bind(this);\n        this.onTouchMoveHandler = this.onTouchMoveHandler.bind(this);\n        this.onTouchEndHandler = this.onTouchEndHandler.bind(this);\n        this.swipeDrawer = this.swipeDrawer.bind(this);\n    }\n\n    componentDidUpdate() {\n        if(this.props.isActive) {\n            document.body.classList.add('drawer--open');\n        } else {\n            document.body.classList.remove('drawer--open');\n        }\n    }\n\n    onTouchHandler(event) {\n        this.drawer.startX = event.touches[0].pageX;\n        this.drawer.currX = this.drawer.startX;\n        this.drawer.isTouched = true;\n        requestAnimationFrame(this.swipeDrawer);\n    }\n\n    onTouchMoveHandler(event) {\n        if(!this.drawer.isTouched) {\n            return;\n        }\n        this.drawer.currX = event.touches[0].pageX;\n    }\n\n    onTouchEndHandler(event) {\n        if(!this.drawer.isTouched) {\n            return;\n        }\n        this.drawer.isTouched = false;\n\n        var newState = {\n            inlineStyle: {\n                transform: ''\n            }\n        }\n\n        if(Math.min(0, this.drawer.currX - this.drawer.startX) < -40 ) {\n            this.props.toggleDrawer();\n        }\n\n        this.setState(prevState => newState);\n    }\n\n    swipeDrawer() {\n        if(!this.drawer.isTouched) {\n            return;\n        }\n        requestAnimationFrame(this.swipeDrawer);\n\n        var translateX = Math.min(0, this.drawer.currX - this.drawer.startX);\n        var transformStyles = 'translateX(' + translateX + 'px)';\n\n        this.setState(prevState => ({\n            inlineStyle: {\n                transform: transformStyles\n            }\n        }));\n    }\n\n    render() {\n\n        return (\n            <div className={'Drawer' + (this.props.isActive ? ' active' : '')}\n                onTouchStart={this.onTouchHandler}\n                onTouchMove={this.onTouchMoveHandler}\n                onTouchEnd={this.onTouchEndHandler}\n                style={this.state.inlineStyle}>\n\n                <div className=\"drawer__header\">\n                    <h2>Select a city</h2>\n                    <i onClick={this.props.toggleDrawer} className=\"material-icons drawer__close\">close</i>\n                </div>\n                <Citylist cities={this.props.cities} selectCity={this.props.selectCity} getLocation={this.props.getLocation} />\n            </div>\n        );\n    }\n}\n\nexport default Drawer;\n","import React from 'react';\n\nconst Indicator = props => {\n    return (\n        <div className={'loader ' + (props.isLoading ? 'active' : '')}>\n            <div className=\"loader__rotation\"></div>\n        </div>\n    );\n}\n\nexport default Indicator;\n","import React from 'react';\nimport { sameDay } from '../../lib/utilities';\nimport './styles.css';\n\nconst dateOptions = { weekday: 'long', month: 'short', day: 'numeric' };\nconst dateTimeOptions = { weekday: 'long', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };\n\nconst DateComponent = props => {\n    const dateObject = new Date(props.timestamp);\n    const now = new Date(Date.now());\n    let dateOutput = sameDay(dateObject, now) ? 'Today' : dateObject.toLocaleDateString('en-GB', dateOptions);\n\n    if(!props.removeTime) {\n        dateOutput = dateObject.toLocaleString('en-GB', dateTimeOptions);\n    }\n\n    return (\n        <div className=\"date\">{dateOutput}</div>\n    );\n}\n\nexport default DateComponent;\n","export const sameDay = (d1, d2) => {\n  return d1.getFullYear() === d2.getFullYear() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getDate() === d2.getDate();\n};\n\nexport const storageAvailable = type => {\n    try {\n        var storage = window[type],\n            x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    }\n    catch(e) {\n        return e instanceof DOMException && (\n            // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            storage.length !== 0;\n    }\n};\n","import React from 'react';\nimport './styles.css';\n\nconst icons = {\n  \"01d\": \"icon-1\",\n  \"01n\": \"icon-2\",\n  \"02d\": \"icon-5\",\n  \"02n\": \"icon-6\",\n  \"03d\": \"icon-12\",\n  \"03n\": \"icon-12\",\n  \"04d\": \"icon-12\",\n  \"04n\": \"icon-12\",\n  \"09d\": \"icon-8\",\n  \"09n\": \"icon-8\",\n  \"10d\": \"icon-8\",\n  \"10n\": \"icon-8\",\n  \"11d\": \"icon-3\",\n  \"11n\": \"icon-3\",\n  \"13d\": \"icon-10\",\n  \"13n\": \"icon-10\",\n  \"50d\": \"icon-7\",\n  \"50n\": \"icon-7\"\n};\n\nconst WeatherIcon = props => {\n  return (\n    <span className={icons[props.icon]}></span>\n  );\n};\n\nexport default WeatherIcon;\n","import React, { Component } from 'react';\nimport DateComponent from '../DateComponent';\nimport WeatherIcon from '../WeatherIcon';\nimport './styles.css';\n\nclass ForecastList extends Component {\n\n    render() {\n        const listItems = this.props.listItems.map((item, index) => {\n            const dateObject = new Date(item.dt * 1000);\n            return (\n                <li key={index}>\n                    <div className=\"forecast__meta\">\n                        <DateComponent timestamp={dateObject} removeTime={true} />\n                        <div className=\"forecast__summary\">{item.weather[0].description}</div>\n                    </div>\n                    <div className=\"forecast__currTemp\">\n                        <div>\n                            <div>{Math.round(item.temp.max)}°</div>\n                            <div className=\"hint\">{Math.round(item.temp.min)}°</div>\n                        </div>\n                        <WeatherIcon icon={item.weather[0].icon} />\n                    </div>\n                </li>\n            );\n        });\n\n        return (\n            <ul className='List'>\n                {listItems}\n                {this.props.children}\n            </ul>\n        );\n    }\n}\n\nexport default ForecastList;\n","import React from 'react';\n\nconst GetLocation = props => {\n    return (\n        <div className=\"getLocation\" onClick={props.getCurrentLocation}><i className=\"material-icons\">my_location</i></div>\n    );\n}\n\nexport default GetLocation;\n","import React, { Component } from 'react';\nimport Drawer from './components/Drawer';\nimport Indicator from './components/Indicator';\nimport DateComponent from './components/DateComponent';\nimport ForecastList from './components/Forecastlist';\nimport GetLocation from './components/GetLocation';\nimport WeatherIcon from './components/WeatherIcon';\nimport { storageAvailable } from './lib/utilities';\n\n\nconst initialCitiesMap = {\n    \"Frankfurt am Main\": {\n        \"coords\": {\n            \"latitude\": 50.1109221,\n            \"longitude\": 8.682126700000026\n        }\n    },\n    \"Berlin\": {\n        \"coords\": {\n            \"latitude\": 52.52000659999999,\n            \"longitude\": 13.404953999999975\n        }\n    },\n    \"London\": {\n        \"coords\": {\n            \"latitude\": 51.5073509,\n            \"longitude\": -0.12775829999998223\n        }\n    },\n    \"New York\": {\n        \"coords\": {\n            \"latitude\": 40.7127837,\n            \"longitude\": -74.00594130000002\n        }\n    },\n    \"Los Angeles\": {\n        \"coords\": {\n            \"latitude\": 34.0522342,\n            \"longitude\": -118.2436849\n        }\n    }\n};\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        if (!localStorage.getItem('ReactWeatherApp')) {\n            this.state = {\n                selectedCity: Object.keys(initialCitiesMap)[0],\n                cities: initialCitiesMap,\n                isLoading: true,\n                drawerOpen: false,\n                weatherAPIData: {\n                    current: {\n                        temp: 0\n                    },\n                    daily: []\n                }\n            };\n        } else {\n            this.state = JSON.parse(localStorage.getItem('ReactWeatherApp'));\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({ isLoading: true });\n        this.getWeatherData(this.state.cities[this.state.selectedCity]);\n    };\n\n    getWeatherData = city => {\n        const { latitude, longitude } = city.coords;\n        const latlng = `lat=${latitude}&lon=${longitude}`;\n        const APIEndpoint = 'https://j3kw67la1a.execute-api.eu-central-1.amazonaws.com/onecall?';\n        const apiURL = APIEndpoint + latlng + '&units=metric&exclude=minutely,hourly&' + Date.now();\n\n        fetch(apiURL)\n            .then(res => res.ok ? Promise.resolve(res) : res.json().then(Promise.reject.bind(Promise)))\n            .then(res => res.json())\n            .then(data => {\n                this.setState(prevState => ({\n                    weatherAPIData: data,\n                    isLoading: false\n                }), this.saveLocalStorage);\n            }).catch(err => {\n                console.error(err);\n            });\n    };\n\n\n    updateWeather = () => {\n        this.setState(prevState => ({\n            isLoading: true,\n            drawerOpen: false\n        }));\n        this.getWeatherData(this.state.cities[this.state.selectedCity]);\n    };\n\n\n    toggleDrawer = () => {\n        this.setState(prevState => ({\n            drawerOpen: !prevState.drawerOpen\n        }));\n    };\n\n    selectCity = event => {\n        const city = event.target.innerText;\n        if (this.state.selectedCity !== city) {\n            this.setState(prevState => ({\n                selectedCity: city,\n                isLoading: true,\n                drawerOpen: false\n            }));\n            this.getWeatherData(this.state.cities[city]);\n        }\n    };\n\n    getCurrentLocation = () => {\n\n        this.setState(prevState => ({\n            isLoading: true,\n            drawerOpen: false\n        }));\n\n        if (navigator.geolocation) {\n            this.getDeviceGeoLocation()\n                .then(position => {\n                    this.getWeatherData(position);\n                    const coordsString = position.coords.latitude + ',' + position.coords.longitude;\n                    this.getCityByCoords(coordsString);\n                });\n        }\n    };\n\n\n    getDeviceGeoLocation = () => {\n        return new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(position => {\n                resolve(position);\n            }, err => {\n                console.error('There was an error using your device\\'s Geolocation: ', err.message);\n                this.setState({\n                    isLoading: false\n                });\n            });\n        });\n    };\n\n\n    getCityByCoords = coords => {\n        const gMapsLatLngStr = coords.split(',', 2);\n        const gMapsLatLng = { lat: parseFloat(gMapsLatLngStr[0]), lng: parseFloat(gMapsLatLngStr[1]) };\n        const geocoder = new window.google.maps.Geocoder();\n        this.geocodeLatLng(geocoder, gMapsLatLng);\n    };\n\n    geocodeLatLng = (geocoder, latlng) => {\n        geocoder.geocode({\n            'location': latlng,\n            'region': 'es'\n        }, (results, status) => {\n            if (status === window.google.maps.GeocoderStatus.OK) {\n                if (results) {\n                    const result = results[0].address_components;\n                    let cityName = '';\n                    for (let i = 0; i < result.length; ++i) {\n                        if ((result[i].types.includes('locality') && result[i].long_name.length > 1)\n                            || result[i].types.includes('administrative_area_level_1')) {\n                            cityName = result[i].long_name;\n                            break;\n                        }\n                    }\n                    this.setState(prevState => ({\n                        selectedCity: cityName,\n                        cities: {\n                            ...prevState.cities,\n                            [cityName]: {\n                                coords: {\n                                    latitude: latlng.lat,\n                                    longitude: latlng.lng\n                                }\n                            }\n                        }\n                    }));\n                } else {\n                    window.alert('No results found');\n                }\n            } else {\n                window.alert('Geocoder failed due to: ' + status);\n            }\n        });\n    };\n\n\n    saveLocalStorage = () => {\n        if (storageAvailable('localStorage')) {\n            // Yippee! We can use localStorage awesomeness\n            localStorage.setItem('ReactWeatherApp', JSON.stringify(this.state));\n        }\n        else {\n            // Too bad, no localStorage for us\n        }\n    };\n\n\n    render = () => {\n        const api = this.state.weatherAPIData;\n        const selectedCity = this.state.selectedCity;\n        const currentTemperature = Math.round(api.current.temp);\n        const currentSummary = api.current.weather[0].description;\n        const date = (api.current.dt * 1000);\n\n        return (\n            <div className=\"site\">\n\n                <Indicator isLoading={this.state.isLoading} />\n\n                <Drawer\n                    cities={Object.keys(this.state.cities)}\n                    selectCity={this.selectCity}\n                    isActive={this.state.drawerOpen}\n                    toggleDrawer={this.toggleDrawer}\n                />\n\n                <div className=\"app__topbar\">\n                    <div className=\"drawer__activate\" onClick={this.toggleDrawer}><i className=\"material-icons\">menu</i></div>\n                    <GetLocation getCurrentLocation={this.getCurrentLocation} />\n                </div>\n\n\n                <div className=\"App-header\">\n                    <h1>{selectedCity}</h1>\n                    <div className=\"appheader__content\">\n                        <div>\n                            <WeatherIcon icon={api.current.weather[0].icon} />\n                        </div>\n                        <div className=\"appheader__right\">\n                            <div className=\"currTemp\">{currentTemperature}°</div>\n                            <div className=\"currSum\">{currentSummary}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"panel\">\n                    <ForecastList listItems={api.daily} />\n                </div>\n\n\n                <div className=\"update-app hint\"><i className=\"material-icons no-select\" onClick={this.updateWeather}>update</i> Last updated:&nbsp;\n                    <DateComponent timestamp={date} />\n                </div>\n\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}